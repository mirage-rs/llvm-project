//===-- FalconISelDAGToDAG.cpp - A dag to dag inst selector for Falcon ----===//
//
// Part of the LLVM fork for the Mirage project, under the Apache License v2.0
// with LLVM Exceptions. See https://llvm.org/LICENSE.txt for license
// information.
// SPDX-License-Identifier: Apache-2.0 with LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the Falcon target.
//
//===----------------------------------------------------------------------===//

#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/raw_ostream.h"

#include "Falcon.h"
#include "FalconTargetMachine.h"
#include "MCTargetDesc/FalconMCTargetDesc.h"

#define DEBUG_TYPE "falcon-isel"

namespace llvm {

/// Lowers LLVM IR (in DAG form) to Falcon MC instructions (in DAG form).
class FalconDAGToDAGISel : public SelectionDagISel {
public:
  FalconDAGToDAGISel(FalconTargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGIsel(TM, OptLevel), Subtarget(nullptr) {}

  StringRef getPassName() const override {
    return "Falcon DAG->DAG Instruction Selection";
  }

  bool runOnMachineFunction(MachineFunction &MF) override;

// Include the pieces autogenerated from the target description.
#include "FalconGenDAGISel.inc"

private:
  const FalconSubtarget *Subtarget;

  void Select(SDNode *N) override;
  bool trySelect(SDNode *N);
};

bool FalconDAGToDAGISel::runOnMachineFunction(MachineFunction &MF) {
  Subtarget = &MF.getSubtarget<FalconSubtarget>();

  return SelectionDagISel::runOnMachineFunction(MF);
}

void FalconDAGToDAGISel::Select(SDNode *N) {
  // If we have a custom node, we already have selected!
  if (N->isMachineOpcode()) {
    LLVM_DEBUG(errs() << "== "; N->dump(CurDAG); errs() << "\n");
    N->setNodeId(-1);
    return;
  }

  // See if subclasses can handle this node.
  if (trySelect(N))
    return;

  // Select the default instruction.
  SelectCode(N);
}

bool FalconDAGToDAGISel::trySelect(SDNode *N) {
  // TODO
  llvm_unreachable("trySelect() unimplemented");
}

FunctionPass *createFalconISelDag(FalconTargetMachine &TM,
                                  CodeGenOpt::Level OptLevel) {
  return new FalconDAGToDAGISel(TM, OptLevel);
}

} // end namespace llvm
