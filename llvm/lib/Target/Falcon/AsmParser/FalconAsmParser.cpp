//==-- FalconAsmParser.cpp - Parse Falcon assembly to MCInst instructions -===//
//
// Part of the LLVM fork for the Mirage project, under the Apache License v2.0
// with LLVM Exceptions. See https://llvm.org/LICENSE.txt for license
// information.
// SPDX-License-Identifier: Apache-2.0 with LLVM-exception
//
//===----------------------------------------------------------------------===//

#include <sstream>

#include "llvm/ADT/APInt.h"
#include "llvm/ADT/StringSwitch.h"
#include "llvm/MC/MCContext.h"
#include "llvm/MC/MCExpr.h"
#include "llvm/MC/MCInst.h"
#include "llvm/MC/MCInstBuilder.h"
#include "llvm/MC/MCParser/MCAsmLexer.h"
#include "llvm/MC/MCParser/MCParsedAsmOperand.h"
#include "llvm/MC/MCStreamer.h"
#include "llvm/MC/MCSubtargetInfo.h"
#include "llvm/MC/MCSymbol.h"
#include "llvm/MC/MCValue.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/MathExtras.h"
#include "llvm/Support/TargetRegistry.h"

#include "Falcon.h"
#include "FalconRegisterInfo.h"
#include "MCTargetDesc/FalconMCExpr.h"
#include "MCTargetDesc/FalconMCTargetDesc.h"
#include "TargetInfo/FalconTargetInfo.h"

#define DEBUG_TYPE "falcon-asm-parser"

namespace llvm {

namespace {

/// Parses Falcon assembly from a stream.
class FalconAsmParser : public MCTargetAsmParser {
public:
  FalconAsmParser(const MCSubtargetInfo &STI, MCAsmParser &Parser,
                  const MCInstrInfo &MII, const MCTargetOptions &Options)
      : MCTargetAsmParser(Options, STI, MII), STI(STI), Parser(Parser) {
    MCAsmParserExtension::Initialize(Parser);
    MRI = getContext().getRegisterInfo();

    setAvailableFeatures(ComputeAvailableFeatures(STI.getFeatureBits()));
  }

  MCAsmParser &getParser() const { return Parser; }
  MCAsmLexer &getLexer() const { return Parser.getLexer(); }

private:
  const MCSubtargetInfo &STI;
  MCAsmParser &Parser;
  const MCRegisterInfo *MRI;
  const std::string GENERATE_STUBS = "gs";

#define GET_ASSEMBLER_HEADER
#include "FalconGenAsmMatcher.inc"
};

// TODO: Implement actual parsing logic.

} // end namespace

// Auto-generated Match Functions

/// Maps from the set of all register names to a register number.
/// \note Generated by TableGen.
static unsigned MatchRegisterName(StringRef Name);

/// Maps from the set of all alternative register names to a register number.
/// \note Generated by TableGen.
static unsigned MatchRegisterAltName(StringRef Name);

extern "C" LLVM_EXTERNAL_VISIBILITY void LLVMInitializeFalconAsmParser() {
  RegisterMCAsmParser<FalconAsmParser> X(getTheFalconTarget());
}

#define GET_REGISTER_MATCHER
#define GET_MATCHER_IMPLEMENTATION
#include "FalconGenAsmMatcher.inc"

} // end namespace llvm
